.MODEL TINY
ORG 100H 

REZIDENT_SIZE EQU START - $
SCREEN_END EQU 0FA0H
SCREEN_START EQU 0B800H
JMP START

RESET_MESSAGE DB 10, 13, "HANDLERS WAS RESETED", 10, 13
SIZE  EQU 24
MESSAGEFOUND DB 10, 13, "STRING IS ON CONSOLE... SAVE INTO FILE", 10, 13
MESSAGE_FOUND_SIZE EQU 42
ERRORCMD DB 0
MESSAGEERRORCMD DB "BAD COMMAND LINE ARGUMENTS", '$'                                                         
MESSAGEEND DB "PRESS CTRL+F TO FIND STRING WITH EXCEPTED WORD", 10, 13, "PRESS CTRL+Q TO RESET INTERRUPT HANDLERS",  '$'
MESSAGEALREADY DB "PROGRAM ALREADY STARTED", '$'
ENDL DB 10, 13, '$'

FOUNDFLAG DB 0
OLD_INT8H_HANDLER_ADRESS DD ?
OLD_INT9H_HANDLER_ADRESS DD ?

BUFFER DB ?
SAVEFLAG DB 0
RESETFLAG DB 0

STRING DB 126 DUP (0)
FILENAME DB "F000.TXT", 0
COUNTERFILE DW 0
DESCRIPTORFILE DW 0
STRINGSIZE DW 4
POINTCURSOR DW 0

GET_INTERRUPT_VECTOR MACRO OLDHANDLER
    MOV AH, 35H					
    INT 21H
    MOV WORD PTR OLDHANDLER, BX			
    MOV WORD PTR OLDHANDLER + 2, ES		
ENDM

SET_INTERRUPT_VECTOR MACRO NEWHANDLER
    MOV AH, 25H					
    MOV DX, OFFSET NEWHANDLER		
    INT 21H       
ENDM

PRINT_STRING MACRO STRING
  	MOV AH, 09H
	MOV DX, OFFSET STRING
	INT 21H       
ENDM

PRINT MACRO STRING
    PRINT_STRING STRING
    PRINT_STRING ENDL 
ENDM

PUTS MACRO STRING SIZE 
    MOV AH, 03H				
    MOV BH, 0					
    INT 10H
    
    MOV AH, 13H					
    MOV AL, 1					
    MOV BH, 0					
    MOV BL, 07H					
    MOV CX, SIZE				
    LEA BP, STRING
    INT 10H 
ENDM

CLOSE_FILE MACRO FILE				
    MOV BX, FILE
    MOV AH, 3EH  
    INT 21H   
ENDM

CREATE_NEW_PATH MACRO
    MOV AX, COUNTERFILE
    MOV DL, 100
    DIV DL
    ADD AL, '0'
    MOV FILENAME + 1, AL
    MOV AL, AH
    XOR AH, AH
    MOV DL, 10
    DIV DL
    ADD AL, '0'
    ADD AH, '0'
    MOV FILENAME + 2, AL
    MOV FILENAME + 3, AH
ENDM

INT8H_USER_HANDLER PROC FAR
    PUSHA
    PUSH DS
    PUSH ES
    
    MOV AX, CS
    MOV DS, AX
    
    MOV FOUNDFLAG, 0
    
    CMP RESETFLAG, 1
    JNE DONTRESET
    
    MOV AH, 25H					
    MOV AL, 08H    				
    MOV DX, CS:OLD_INT8H_HANDLER_ADRESS			
    MOV DS, CS:OLD_INT8H_HANDLER_ADRESS + 2			
    INT 21H
    
    MOV AH, 25H					
    MOV AL, 09H    				
    MOV DX, CS:OLD_INT9H_HANDLER_ADRESS			
    MOV DS, CS:OLD_INT9H_HANDLER_ADRESS + 2
    INT 21H
    
    MOV AX, CS
    MOV ES, AX
    PUTS RESET_MESSAGE SIZE 
    JMP END_X0

    DONTRESET:
    MOV AX, SCREEN_START
    MOV ES, AX
    MOV POINTCURSOR, 0
    
    FINDLOOP_0:
    XOR CX, CX
    MOV DI, POINTCURSOR
    LEA SI, STRING
    
    FINDLOOP_1:
    MOV BL, ES:DI
    CMP BL, [SI]
    JNE DO_NOT_FOUND:
    ADD DI, 2
    SHR DI, 1
    MOV BX, POINTCURSOR
    SHR BX, 1
    ADD BX, STRINGSIZE
    CMP DI, BX
    JE FOUND
    SHL DI, 1
    INC SI
    JMP FINDLOOP_1
    
    FOUND:
    
    CMP SAVEFLAG, 1
    JNE DO_NOT_SAVE
    
    CALL FIND_ON_COSOLE
    MOV FOUNDFLAG, 1

    DO_NOT_SAVE:
    MOV CX, STRINGSIZE
    MOV DI, POINTCURSOR
    SAVELOOP:
    ADD DI, 2
    LOOP SAVELOOP
    MOV AX, STRINGSIZE
    SHL AX, 1
    ADD POINTCURSOR, AX
    JMP CONTROLLOOP
    
    DO_NOT_FOUND:
    MOV DI, POINTCURSOR 
    INC DI
    ADD POINTCURSOR, 2
    
    CONTROLLOOP:
    
    CMP POINTCURSOR, SCREEN_END
    JB FINDLOOP_0
    
    END_X0:
    MOV SAVEFLAG, 0
    
    CMP FOUNDFLAG, 1
    JNE DO_NOT_FOUNDSCREEN
    MOV AX, CS
    MOV ES, AX
    PUTS MESSAGEFOUND MESSAGE_FOUND_SIZE 
    DO_NOT_FOUNDSCREEN:
    
    PUSHF
    CALL CS:DWORD PTR OLD_INT8H_HANDLER_ADRESS
    
    POP ES
    POP DS
    POPA
    IRET
INT8H_USER_HANDLER ENDP

INT9H_USER_HANDLER PROC FAR
    PUSHA
    
    PUSHF
    CALL CS:DWORD PTR OLD_INT9H_HANDLER_ADRESS
    
    MOV AH, 01H     
    INT 16H
    MOV BH, AH		
    JZ DONTPRESSKEY
    MOV AH, 02H		
    INT 16H
    AND AL, 1DH     ; check is CTRL pressed      	
    CMP AL, 0
    JE DONTPRESSKEY
    CMP BH, 21H     ; F pressed
    JNE NOTKEYS
    MOV CS:SAVEFLAG, 1
    MOV AH, 00H
    INT 16H
    NOTKEYS:
    CMP BH, 10H     ; Q pressed
    JNE DONTPRESSKEY
    MOV CS:RESETFLAG, 1
    MOV AH, 00H
    INT 16H
    DONTPRESSKEY:
    
    POPA 
    IRET 
INT9H_USER_HANDLER ENDP

FIND_ON_COSOLE PROC
    PUSHA
    PUSH DI
    PUSH SI
    MOV AH, 34H   
    INT 21H
    CLI			
    
    MOV AL, ES:BX
    DEC BX
    MOV AH, ES:BX
    CMP AL, 0
    JNE ENDFINDSCREEN
    CMP AH, 0
    JNE ENDFINDSCREEN
    
    MOV AX, SCREEN_START
    MOV ES, AX
    
    MOV COUNTERFILE, 0
    
    OPENFINDLOOP:
    CREATE_NEW_PATH
    LEA DX, FILENAME
    XOR CX, CX
    MOV AH, 5BH			
    INT 21H
    JNC NORMALFILE

    INC COUNTERFILE
    CMP AX, 50H
    JE OPENFINDLOOP
    
    NORMALFILE:
    MOV DESCRIPTORFILE, AX
    
    MOV AX, POINTCURSOR
    MOV BL, 160
    DIV BL
    XOR AH, AH
    MUL BL
    MOV DI, AX 
    MOV CX, 80     
    
    WRITESCREENLOOP:
    
    MOV BX, DESCRIPTORFILE
    MOV AH, 40H
    PUSH CX
    MOV CL, ES:DI
    MOV BUFFER, CL
    LEA DX, BUFFER
    MOV CX, 1
    INT 21H   
    POP CX 
    
    ADD DI, 2
    CMP DI, SCREEN_END
    JAE WRITESCREENLOOPEND
    
    LOOP WRITESCREENLOOP
     
    WRITESCREENLOOPEND:
    
    CLOSE_FILE DESCRIPTORFILE
        
    ENDFINDSCREEN:
    STI
    POP SI
    POP DI
    POPA
    RET
FIND_ON_COSOLE ENDP

START:
    CALL COMMAND_LINE_CHECK
    
    MOV AL, 08H
    GET_INTERRUPT_VECTOR OLD_INT8H_HANDLER_ADRESS
    CMP BX, INT8H_USER_HANDLER
    je RUNALREADY 
    
    CMP ERRORCMD, 1
    JE ERRORCMDEXIT
   
    MOV AL, 08H
    SET_INTERRUPT_VECTOR INT8H_USER_HANDLER 

    MOV AL, 09H
    GET_INTERRUPT_VECTOR OLD_INT9H_HANDLER_ADRESS

    MOV AL, 09H
    SET_INTERRUPT_VECTOR INT9H_USER_HANDLER
    
    PRINT MESSAGEEND
    MOV AX, 3100H
    MOV DX, (REZIDENT_SIZE + 100H) / 16 + 1
    INT 21H
    
    ERRORCMDEXIT:
    PRINT MESSAGEERRORCMD
    JMP ENDPROGRAM:

    RUNALREADY:
    PRINT MESSAGEALREADY

    ENDPROGRAM:
    .EXIT                  

COMMAND_LINE_CHECK PROC
    MOV SI, 80H
    LEA DI, STRING
    LODSB
    
    SKIPSPACESCMD:
    LODSB
    CMP AL, ' '
    JE SKIPSPACESCMD
    
    CMP AL, 0DH
    JE ERRORCMD_
    
    MOV ES:DI, AL
    INC DI
    
    COMMAND_LINE_CHECKLOOP:
    LODSB
    CMP AL, ' '
    JE ENDREADCMD
    CMP AL, 0DH
    JE ENDREADCMD
    MOV ES:DI, AL
    INC DI
    JMP COMMAND_LINE_CHECKLOOP
    
    ERRORCMD_:
    MOV ERRORCMD, 1
    
    ENDREADCMD:
    SUB DI, OFFSET STRING
    MOV STRINGSIZE, DI
       
	RET	
ENDP  
        
END START
